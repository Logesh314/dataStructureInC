#// Tree traversal in C

#include <stdio.h>
#include <stdlib.h>

struct node {
  int item;
  struct node* left;
  struct node* right;
};


void inorderTraversal(struct node* root) {
  if (root == NULL) return;
  inorderTraversal(root->left);
  printf("%d ", root->item);
  inorderTraversal(root->right);
}


void preorderTraversal(struct node* root) {
  if (root == NULL) return;
  printf("%d ", root->item);
  preorderTraversal(root->left);
  preorderTraversal(root->right);
}


void postorderTraversal(struct node* root) {
  if (root == NULL) return;
  postorderTraversal(root->left);
  postorderTraversal(root->right);
  printf("%d ", root->item);
}


struct node* create(int value) {
  struct node* newNode = malloc(sizeof(struct node));
  newNode->item = value;
  newNode->left = NULL;
  newNode->right = NULL;

  return newNode;
}


struct node* insertLeft(struct node* root, int value) {
  root->left = create(value);
  return root->left;
}


struct node* insertRight(struct node* root, int value) {
  root->right = create(value);
  return root->right;
}

int main() {
    int valueleft,valueright,valuerootleft,valuerootleftofright,valuerootright,valuerootrightofright;
int first_root;
printf("enter the first roor:");
scanf("%d",&first_root);

  struct node* root = create(first_root);

  printf("enter the value of left:");
  scanf("%d",&valueleft);
  printf("enter the value of right:");
  scanf("%d",&valueright);
  printf("enter the value of rootleft:");
  scanf("%d",&valuerootleft);
  printf("enter the value of root left ->right:");
  scanf("%d",&valuerootleftofright);
  printf("enter the value of rootright:");
  scanf("%d",&valuerootright);
  printf("enter the value of root right->left:");
  scanf("%d",&valuerootrightofright);

  insertLeft(root, valueleft);
  insertRight(root, valueright);
  insertLeft(root->left,valuerootleft);
  insertRight(root->left, valuerootleftofright);
  insertLeft(root->right,valuerootright);
  insertRight(root->right,valuerootrightofright);

  printf("Traversal of the inserted binary tree \n");
  printf("Inorder traversal \n");
  inorderTraversal(root);

  printf("\nPreorder traversal \n");
  preorderTraversal(root);


  printf("\nPostorder traversal \n");
  postorderTraversal(root);

}

